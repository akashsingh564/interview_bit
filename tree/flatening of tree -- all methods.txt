TreeNode* Solution::flatten(TreeNode* A) {
    if(A==NULL)
        return A;
    TreeNode* node=A;
    while(node){
        if(node->left){
            TreeNode* rightmost=node->left;
            while(rightmost->right)
                rightmost=rightmost->right;
            rightmost->right=node->right;
            node->right=node->left;
            node->left=NULL;
        }
        node=node->right;
    }
    return A;
}



TreeNode* Solution::flatten(TreeNode* A) {
    stack <TreeNode*> s;
    TreeNode* cur=A;
    bool done=false;
    while(!done){
        if(cur->left){
            if(cur->right)
                s.push(cur->right);
            cur->right=cur->left;
            cur->left=NULL;
        }
        else if(!cur->left && !cur->right){
            if(s.empty())
                done=true;
            else{
                cur->right=s.top();
                s.pop();
            }
        }
        cur=cur->right;
    }
    return A;
}
