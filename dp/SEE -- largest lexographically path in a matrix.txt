//https://www.hackerearth.com/practice/algorithms/dynamic-programming/2-dimensional/practice-problems/algorithm/turtles-path-4/description/

#include <bits/stdc++.h>
using namespace std;

typedef pair <int,int> p;

#define MOD 1000000007
#define LIMIT 100005
#define ll long long
#define mp(a,b) make_pair(a,b)
#define pb(x) push_back(x)
#define ff first
#define ss second

int prime[100007];
int a[1005][1005], visit[1005][1005];
ll dp[1005][1005];
p path[5005];
int n,m,q;

int seive(){
    memset(prime,0,sizeof(prime));
    for(int i=2;i<LIMIT;i++){
        if(!prime[i]){
            for(int j=2*i;j<LIMIT;j+=i)
                prime[j]=1;
        }
    }
}

int dfs(int x, int y, int k){
    if(x>n || y>m || !a[x][y] || visit[x][y] || q)
        return 0;
    
    visit[x][y]=1;
    path[k]=mp(x,y);
    if(x==n && y==m){
        q=k;
        return 0;
    }
    
    //lex largest order
    dfs(x+1,y+1,k+1);
    dfs(x+1,y,k+1);
    dfs(x,y+1,k+1);
    
    /*
    //lex smallest order
    dfs(x,y+1,k+1);
    dfs(x+1,y,k+1);
    dfs(x+1,y+1,k+1);
    */
    
    return 0;
}


int main(){
    seive();
    
    cin>>n>>m;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            cin>>a[i][j];
            if(!prime[a[i][j]])
                a[i][j]=1;
            else
                a[i][j]=0;     
        }
    }
    
    //calculating number of paths
    memset(dp,0,sizeof(dp));
    dp[1][1]=1;
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(i==1 && j==1)
                continue;
            if(a[i][j]!=0)
                dp[i][j]=(dp[i-1][j]+dp[i][j-1]+dp[i-1][j-1])%MOD;
        }
    }
    cout<<dp[n][m]<<endl;
    
    //calculating path
    memset(visit,0,sizeof(visit));
    dfs(1,1,1);
    for(int i=1;i<=q;i++)
        cout<<path[i].ff<<" "<<path[i].ss<<endl;
    
    return 0;
}
