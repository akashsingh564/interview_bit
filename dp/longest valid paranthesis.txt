int Solution::longestValidParentheses(string A) {
    int ans=0;
    stack <int> s;
    s.push(-1);
    for(int i=0;i<A.size();i++){
        if(A[i]=='(')
            s.push(i);
        else{
            s.pop();
            if(!s.empty())
                ans=max(ans,i-s.top());
            else
                s.push(i);
        }
    }
    return ans;
}


/*** DP ***/
/*
if (s.length() <= 1) return 0;
            int curMax = 0;
            vector<int> longest(s.size(), 0);
            for (int i = 1; i < s.length(); i++) {
                if (s[i] == ')' && i - longest[i - 1] - 1 >= 0 && s[i - longest[i - 1] - 1] == '(') {
                    longest[i] = longest[i - 1] + 2 + ((i - longest[i - 1] - 2 >= 0) ? longest[i - longest[i - 1] - 2] : 0);
                    curMax = max(longest[i], curMax);
                }
            }
            return curMax;



*/
    /*if s[i] is ‘(‘, set longest[i] to 0, because any string end with ‘(‘ cannot be a valid one.

Else if s[i] is ‘)’ 

If s[i-1] is ‘(‘, longest[i] = longest[i-2] + 2 

Else if s[i-1] is ‘)’ and s[i-longest[i-1]-1] == ‘(‘, longest[i] = longest[i-1] + 2 + longest[i-longest[i-1]-2]
*/