int visit[1005][1005];
int row[]={0,-1,0,1};
int col[]={1,0,-1,0};
int r,c;

bool is_safe(int x, int y){
    return (x>=0 && x<r && y>=0 && y<c);
}
int dfs(int x, int y, vector<string> &A, string B, int len){
    if(len==B.size())
        return 1;
    for(int i=0;i<4;i++){
        int rx=x+row[i];
        int ry=y+col[i];
        if(is_safe(rx,ry) && !visit[rx][ry] && A[rx][ry]==B[len]){
            //visit[rx][ry]=1;
            if(dfs(rx,ry,A,B,len+1))
                return 1;
            //visit[rx][ry]=0;
        }
    }
    return 0;
}


int Solution::exist(vector<string> &A, string B) {
    r=A.size();
    c=A[0].size();
    memset(visit,0,sizeof(visit));
    for(int i=0;i<r;i++){
        for(int j=0;j<c;j++){
            if(A[i][j]==B[0]){
                //visit[i][j]=1;
                if(dfs(i,j,A,B,1))
                    return 1;
                //visit[i][j]=0;
            }
        }
    }
    return 0;
}
