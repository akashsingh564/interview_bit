#include <bits/stdc++.h>
using namespace std;

int n,m,x,y,q,t,root;
int visit[100005], par[100005], ap[100005], disc[100005], low[100005];
vector <int> adj[100005];

int find_ap(int u){
    visit[u]=1;
    disc[u]=low[u]=++t;
    int child=0;
    for(int i=0;i<adj[u].size();i++){
        int v=adj[u][i];
        if(!visit[v]){
            child++;
            par[v]=u;
            find_ap(v);
            low[u]=min(low[u],low[v]);
            if(par[u]==-1 && child>1)
                ap[u]=1;
            else if(par[u]!=-1 && low[v]>=disc[u])
                ap[u]=1;
        }
        else{
            if(par[u]!=v)
                low[u]=min(low[u],disc[v]);
        }
    }
}

int main(){
    memset(par,-1,sizeof(par));
    root=INT_MAX;
    cin>>n>>m;
    for(int i=0;i<m;i++){
        cin>>x>>y;
        adj[x].push_back(y);
        adj[y].push_back(x);
        root=min(root,min(x,y));
    }
    find_ap(root);
    cin>>q;
    if(ap[q])
        cout<<"Not Connected"<<endl;
    else
        cout<<"Connected"<<endl;
    return 0;
}
