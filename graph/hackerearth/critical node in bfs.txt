//https://www.hackerearth.com/practice/algorithms/graphs/shortest-path-algorithms/practice-problems/algorithm/monk-and-graph-g-codemonk-2/description/

#include <bits/stdc++.h>
using namespace std;

#define pb push_back

int n,m,x,y,a,b,ans=INT_MAX;
vector <int> adj[100005], paths[100005];
vector <int> from (100005,INT_MAX), to (100005,INT_MAX);

int dfs(int x, vector <int> &d){
    queue <int> q;
    d[x]=0;
    q.push(x);
    
    while(!q.empty()){
        int u=q.front();
        q.pop();
        
        for(auto v:adj[u]){
            if(d[v]>1+d[u]){
                d[v]=1+d[u];
                q.push(v);
            }
        }
    }
    
    return 0;
}

int main(){
    cin>>n>>m;
    while(m--){
        cin>>x>>y;
        adj[x].pb(y);
        adj[y].pb(x);
    }
    
    cin>>a>>b;
    dfs(a,from);
    dfs(b,to);
    
    for(int i=1;i<=n;i++)
        if(from[i]+to[i]==from[b] && from[i]!=INT_MAX)
            paths[from[i]].pb(i);
    
    for(int i=1;i<=n;i++)
        if(paths[i].size()==1 && paths[i][0]!=a && paths[i][0]!=b)
            ans=min(ans,paths[i][0]);
            
    if(ans==INT_MAX)
        cout<<-1<<endl;
    else
        cout<<ans<<endl;
    
    return 0;
}
