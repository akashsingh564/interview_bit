//https://www.hackerearth.com/practice/algorithms/graphs/breadth-first-search/practice-problems/algorithm/permutation-swaps/description/

#include <bits/stdc++.h>
using namespace std;

vector <int> a,b,p,q;
vector <int> adj[100005];
int visit[100005];
int t,n,m,x,k,l,flag;

int dfs(int u){
    p.push_back(a[u]);
    q.push_back(b[u]);
    visit[u]=1;
    for(int i=0;i<adj[u].size();i++)
        if(!visit[adj[u][i]])
            dfs(adj[u][i]);
            
    return 0;
}


int main(){
    cin>>t;
    while(t--){
        memset(visit,0,sizeof(visit));
        for(int i=0;i<100005;i++)
            adj[i].clear();
        flag=1;
            
        cin>>n>>m;
        a.resize(n);
        b.resize(n);
        for(int i=0;i<n;i++)
            cin>>a[i];
        for(int i=0;i<n;i++)
            cin>>b[i];
        
        
        
        for(int i=0;i<m;i++){
            cin>>k>>l;
            adj[k-1].push_back(l-1);
            adj[l-1].push_back(k-1);
        }
        
        for(int i=0;i<n;i++){
            if(!visit[i]){
                p.clear();
                q.clear();
                dfs(i);
                sort(p.begin(),p.end());
                sort(q.begin(),q.end());
                if(p!=q)
                    flag=0;
            }
        }
        
        if(flag)
            cout<<"YES"<<endl;
        else
            cout<<"NO"<<endl;
    }
    return 0;
}
